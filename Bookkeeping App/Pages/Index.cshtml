@page
@model Bookkeeping_App.Pages.IndexModel
@{
    ViewData["Title"] = "語音記帳";
}

<div class="container py-4">
    <h1 class="mb-3">語音記帳</h1>
    <form id="entryForm" class="mb-4" autocomplete="off" onsubmit="return false;">
        <div class="row g-2 mb-2">
            <div class="col-12 col-md-3">
                <input type="date" class="form-control" id="date" required autofocus />
            </div>
            <div class="col-12 col-md-3">
                <input type="number" class="form-control" id="amount" placeholder="金額" min="1" required />
            </div>
            <div class="col-12 col-md-3">
                <select class="form-select" id="category" required>
                    <option value="">選擇類別</option>
                    <option value="收入">收入</option>
                    <option value="支出">支出</option>
                </select>
            </div>
            <div class="col-12 col-md-3">
                <input type="text" class="form-control" id="note" placeholder="備註" />
            </div>
        </div>
        <div class="d-flex align-items-center gap-2 mb-2">
            <button type="button" id="voiceBtn" class="btn btn-primary">
                <span id="voiceIcon" class="bi bi-mic"></span> 語音輸入
            </button>
            <span id="voiceStatus" class="text-secondary small"></span>
            <button type="submit" class="btn btn-success ms-auto">新增紀錄</button>
            <button type="button" id="themeToggle" class="btn btn-outline-secondary" title="主題切換">
                <span id="themeIcon" class="bi bi-moon"></span>
            </button>
        </div>
        <div id="errorMsg" class="alert alert-danger d-none" role="alert"></div>
    </form>
    <div>
        <h5>記帳紀錄</h5>
        <div class="table-responsive">
            <table class="table table-striped align-middle" id="recordsTable">
                <thead>
                    <tr>
                        <th>日期</th>
                        <th>金額</th>
                        <th>類別</th>
                        <th>備註</th>
                        <th>操作</th>
                    </tr>
                </thead>
                <tbody id="recordsBody">
                    <!-- JS 動態產生紀錄 -->
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.js"></script>
    <script>
        // 前端暫存資料
        let records = [];
        // ...existing code...
        // 主題切換
        const themeToggle = document.getElementById('themeToggle');
        const themeIcon = document.getElementById('themeIcon');
        themeToggle.addEventListener('click', () => {
            document.body.classList.toggle('dark-theme');
            themeIcon.classList.toggle('bi-moon');
            themeIcon.classList.toggle('bi-sun');
        });
        // ...existing code...
        // 語音辨識（Web Speech API 範例，可替換為 Azure Speech Service）
        let recognizing = false;
        let recognition;
        const voiceBtn = document.getElementById('voiceBtn');
        const voiceStatus = document.getElementById('voiceStatus');
        const errorMsg = document.getElementById('errorMsg');
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            recognition = new SpeechRecognition();
            recognition.lang = 'zh-TW';
            recognition.continuous = false;
            recognition.interimResults = false;
            recognition.onstart = () => {
                recognizing = true;
                voiceStatus.textContent = '辨識中...';
                voiceBtn.classList.add('btn-warning');
            };
            recognition.onend = () => {
                recognizing = false;
                voiceStatus.textContent = '';
                voiceBtn.classList.remove('btn-warning');
            };
            recognition.onerror = (e) => {
                errorMsg.textContent = '語音辨識失敗，請再試一次。';
                errorMsg.classList.remove('d-none');
            };
            recognition.onresult = (e) => {
                errorMsg.classList.add('d-none');
                const result = e.results[0][0].transcript;
                // 嘗試自動填入金額、類別、備註
                parseSpeech(result);
            };
            voiceBtn.onclick = () => {
                if (recognizing) {
                    recognition.stop();
                } else {
                    recognition.start();
                }
            };
        } else {
            voiceBtn.disabled = true;
            voiceStatus.textContent = '瀏覽器不支援語音辨識';
        }
        // ...existing code...
        // 語音文字解析（簡易範例，可依需求擴充）
        function parseSpeech(text) {
            // 範例："7月18日 支出 100 早餐"
            const date = new Date();
            document.getElementById('date').value = date.toISOString().slice(0,10);
            if (text.includes('收入')) {
                document.getElementById('category').value = '收入';
            } else if (text.includes('支出')) {
                document.getElementById('category').value = '支出';
            }
            const amountMatch = text.match(/\d+/);
            if (amountMatch) {
                document.getElementById('amount').value = amountMatch[0];
            }
            document.getElementById('note').value = text.replace(/\d+|收入|支出/g, '').trim();
            document.getElementById('amount').focus();
        }
        // ...existing code...
        // 表單送出
        document.getElementById('entryForm').onsubmit = function() {
            errorMsg.classList.add('d-none');
            const date = document.getElementById('date').value;
            const amount = document.getElementById('amount').value;
            const category = document.getElementById('category').value;
            const note = document.getElementById('note').value;
            if (!date || !amount || !category) {
                errorMsg.textContent = '請完整填寫所有欄位';
                errorMsg.classList.remove('d-none');
                return false;
            }
            records.push({ date, amount, category, note });
            renderRecords();
            this.reset();
            document.getElementById('date').focus();
            return false;
        };
        // ...existing code...
        // 紀錄渲染
        function renderRecords() {
            const tbody = document.getElementById('recordsBody');
            tbody.innerHTML = '';
            records.forEach((rec, idx) => {
                const tr = document.createElement('tr');
                tr.innerHTML = `<td>${rec.date}</td><td>${rec.amount}</td><td>${rec.category}</td><td>${rec.note}</td><td><button class='btn btn-sm btn-danger' onclick='deleteRecord(${idx})'>刪除</button></td>`;
                tbody.appendChild(tr);
            });
        }
        // ...existing code...
        // 刪除紀錄
        function deleteRecord(idx) {
            records.splice(idx, 1);
            renderRecords();
        }
        // ...existing code...
    </script>
    <style>
        body.dark-theme {
            background: #222;
            color: #eee;
        }
        body.dark-theme .form-control, body.dark-theme .form-select {
            background: #333;
            color: #eee;
        }
        body.dark-theme .table {
            color: #eee;
        }
        @media (max-width: 600px) {
            .container { padding: 0 5px; }
            h1 { font-size: 1.5rem; }
        }
    </style>
}
